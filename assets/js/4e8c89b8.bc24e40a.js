"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[4361],{9621:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var t=r(5893),s=r(1151);const a={title:"How To Define Helm Chart Dependencies"},o=void 0,c={id:"guides/Helm/how-to-helm-dependency",title:"How To Define Helm Chart Dependencies",description:"This guide shows how to reference a Helm chart as dependency through an example.",source:"@site/docs/guides/Helm/how-to-helm-dependency.md",sourceDirName:"guides/Helm",slug:"/guides/Helm/how-to-helm-dependency",permalink:"/docs/guides/Helm/how-to-helm-dependency",draft:!1,unlisted:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/Helm/how-to-helm-dependency.md",tags:[],version:"current",frontMatter:{title:"How To Define Helm Chart Dependencies"},sidebar:"tutorialSidebar",previous:{title:"How to be part of the Release Umbrella Helm Chart",permalink:"/docs/guides/Helm/how-to-be-part-of-release-umbrella-helm"},next:{title:"How to lint and test your helm chart",permalink:"/docs/guides/Helm/how-to-lint-and-test-your-helm-chart"}},l={},i=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This guide shows how to reference a Helm chart as dependency through an example.\r\nThe example application is ",(0,t.jsx)(n.a,{href:"https://backstage.io/",children:"Backstage"})," which by default installs a dedicated Postgresql instance as a dependency in case you do not already have one and want to specify it in the application configuration."]}),"\n",(0,t.jsx)(n.p,{children:"How to reference the Postgresql Helm chart:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/contrib/chart/backstage/Chart.yaml",children:"Chart.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"...\r\ndependencies:\r\n  - name: postgresql\r\n    condition: postgresql.enabled\r\n    version: 9.8.12\r\n    repository: https://charts.bitnami.com/bitnami\r\n...\n"})}),"\n",(0,t.jsx)(n.p,{children:"Name should match the name in the Chart.yaml of the dependency Helm chart."}),"\n",(0,t.jsx)(n.p,{children:"The version field should contain a semantic version or version range."}),"\n",(0,t.jsx)(n.p,{children:"The repository URL should point to a Chart Repository, or can be defined as the path to the directory of the dependency charts stored locally."}),"\n",(0,t.jsx)(n.p,{children:"The condition controls whether or not to install the dependency, in this case this option is defined in values.yaml (see below)."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://helm.sh/docs/helm/helm_dependency/",children:"Further info"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://helm.sh/docs/chart_best_practices/dependencies/",children:"Best Pactices"})}),"\n",(0,t.jsx)(n.p,{children:"How to en-/disable the deployment of Postgresql and configure it:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/backstage/backstage/blob/master/contrib/chart/backstage/values.yaml",children:"values.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"...\r\npostgresql:\r\n  enabled: true\r\n  nameOverride: postgresql\r\n  tls:\r\n    enabled: true\r\n    certificatesSecret: backstage-postgresql-certs\r\n    certFilename: tls.crt\r\n    certKeyFilename: tls.key\r\n  volumePermissions:\r\n    enabled: true\r\n  initdbScriptsSecret: backstage-postgresql-initdb\r\n...\n"})}),"\n",(0,t.jsx)(n.p,{children:"Further parameters that can be configured:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md#parameters",children:"Bitnami Postgresql Helm Chart readme"})}),"\n",(0,t.jsx)(n.p,{children:"Generate ca certs and random password for Postgresql:"}),"\n",(0,t.jsx)(n.p,{children:"(e.g. templates_helpers.tpl)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{{/*\r\nGenerate ca for postgresql\r\n*/}}\r\n{{- define "backstage.postgresql.generateCA" -}}\r\n{{- $ca := .ca | default (genCA (include "backstage.postgresql.fullname" .) 365) -}}\r\n{{- $_ := set . "ca" $ca -}}\r\n{{- $ca.Cert -}}\r\n{{- end -}}\r\n\r\n{{/*\r\nGenerate certificates for postgresql\r\n*/}}\r\n{{- define "generateCerts" -}}\r\n{{- $postgresName := (include "backstage.postgresql.fullname" .) }}\r\n{{- $altNames := list $postgresName ( printf "%s.%s" $postgresName .Release.Namespace ) ( printf "%s.%s.svc" ( $postgresName ) .Release.Namespace ) -}}\r\n{{- $ca := .ca | default (genCA (include "backstage.postgresql.fullname" .) 365) -}}\r\n{{- $_ := set . "ca" $ca -}}\r\n{{- $cert := genSignedCert ( $postgresName ) nil $altNames 365 $ca -}}\r\ntls.crt: {{ $cert.Cert | b64enc }}\r\ntls.key: {{ $cert.Key | b64enc }}\r\n{{- end -}}\r\n\r\n{{/*\r\nGenerate a password for the postgres user used for the connections from the backend and lighthouse\r\n*/}}\r\n{{- define "postgresql.generateUserPassword" -}}\r\n{{- $pgPassword := .pgPassword | default ( randAlphaNum 12 ) -}}\r\n{{- $_ := set . "pgPassword" $pgPassword -}}\r\n{{ $pgPassword}}\r\n{{- end -}}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Create a configmap or secret with the generated cert:"}),"\n",(0,t.jsx)(n.p,{children:"(e.g. templates/...yaml)"}),"\n",(0,t.jsx)(n.p,{children:"configmap - cert:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{{- if .Values.postgresql.enabled }}\r\n---\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: {{ include "backstage.fullname" . }}-postgres-ca\r\n  labels:\r\n    app: {{ include "backstage.postgresql.fullname" . }}\r\n    release: {{ .Release.Name }}\r\n  annotations:\r\n    "helm.sh/hook": "pre-install"\r\n    "helm.sh/hook-delete-policy": "before-hook-creation"\r\ndata:\r\n  {{ .Values.global.postgresql.caFilename }}: |\r\n{{ include "backstage.postgresql.generateCA" . | indent 4}}\r\n{{- else }}\r\n{{- $caConfig := printf "%s-postgres-ca"  (include "backstage.fullname" .) }}\r\n{{- if not ( lookup "v1" "ConfigMap" .Release.Namespace $caConfig ) }}\r\n{{- fail (printf "\\n\\nPlease create the \'%s\' configmap with the CA certificate for your existing postgresql: kubectl create configmap %s --from-file=ca.crt" $caConfig $caConfig) }}\r\n{{- end }}\r\n{{- end }}\r\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"secret - cert:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{{- if .Values.postgresql.enabled }}\r\n---\r\napiVersion: v1\r\nkind: Secret\r\ntype: kubernetes.io/tls\r\nmetadata:\r\n  name: {{ required ".Values.postgresql.tls.certificatesSecret is required" .Values.postgresql.tls.certificatesSecret }}\r\n  labels:\r\n    app: {{ include "backstage.postgresql.fullname" . }}\r\n    release: {{ .Release.Name }}\r\n  annotations:\r\n    "helm.sh/hook": "pre-install"\r\n    "helm.sh/hook-delete-policy": "before-hook-creation"\r\ndata:\r\n{{ include "generateCerts" . | indent 2 }}\r\n{{- end }}\n'})}),"\n",(0,t.jsx)(n.p,{children:"secret - password:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'apiVersion: v1\r\nkind: Secret\r\ntype: Opaque\r\nmetadata:\r\n  name: {{ include "backend.postgresql.passwordSecret" . }}\r\n  labels:\r\n    release: {{ .Release.Name }}\r\n  annotations:\r\n    "helm.sh/hook": "pre-install,pre-upgrade"\r\n    "helm.sh/hook-delete-policy": "before-hook-creation"\r\ndata:\r\n{{- if not .Values.postgresql.enabled }}\r\n  postgresql-password: {{ .Values.appConfig.backend.database.connection.password | b64enc }}\r\n{{- else -}}\r\n  postgresql-password: {{ include postgresql.generateUserPassword . | b64enc }}\r\n{{- end }}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Postgresql connetion settings:"}),"\n",(0,t.jsx)(n.p,{children:"(backend deployment)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'apiVersion: apps/v1\r\nkind: Deployment\r\n...\r\nspec:\r\n...\r\n  templates:\r\n  ...\r\n    spec:\r\n    ...\r\n      containers:\r\n      ...\r\n        env:\r\n        ...\r\n          - name: APP_CONFIG_backend_database_connection_password\r\n            valueFrom:\r\n              secretKeyRef:\r\n                name: {{ include "backend.postgresql.passwordSecret" .}}\r\n                key: postgresql-password\r\n        volumeMounts:\r\n          {{- if .Values.backend.postgresCertMountEnabled }}\r\n          - name: postgres-ca\r\n            mountPath: {{ include "backstage.backend.postgresCaDir" . }}\r\n          {{- end }}\r\n        ...\r\n      volumes:\r\n        {{- if .Values.backend.postgresCertMountEnabled }}\r\n        - name: postgres-ca\r\n          configMap:\r\n            name: {{ include "backstage.fullname" . }}-postgres-ca\r\n        {{- end }}\n'})}),"\n",(0,t.jsx)(n.p,{children:"(values.yaml)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"...\r\nappConfig:\r\n...\r\n  backend:\r\n  ...\r\n    database:\r\n      client: pg\r\n      connection:\r\n        database: backstage_plugin_catalog\r\n        host:\r\n        user:\r\n        port:\r\n        password:\r\n        ssl:\r\n          rejectUnauthorized: false\r\n          ca:\r\n...\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>o});var t=r(7294);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);