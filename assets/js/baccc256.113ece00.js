"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[3428],{5040:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(5893),a=t(1151);const i={title:"How to use persistent storage"},r=void 0,l={id:"guides/kubernetes/how-to-use-persistent-storage",title:"How to use persistent storage",description:"This is a short guide on how to create persistent storage on Kubernetes clusters.",source:"@site/docs/guides/kubernetes/how-to-use-persistent-storage.md",sourceDirName:"guides/kubernetes",slug:"/guides/kubernetes/how-to-use-persistent-storage",permalink:"/docs/guides/kubernetes/how-to-use-persistent-storage",draft:!1,unlisted:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/kubernetes/how-to-use-persistent-storage.md",tags:[],version:"current",frontMatter:{title:"How to use persistent storage"},sidebar:"tutorialSidebar",previous:{title:"How To Monitor CPU And Memory Usage",permalink:"/docs/guides/kubernetes/how-to-monitor"},next:{title:"Catena-X@Home Getting Started Guide",permalink:"/docs/guides/catenax-at-home"}},o={},c=[{value:"A very basic PersistentVolumeClaim (PVC) definition",id:"a-very-basic-persistentvolumeclaim-pvc-definition",level:2},{value:"Templating PVC",id:"templating-pvc",level:2},{value:"Create a template in the templates directory of the helm chart",id:"create-a-template-in-the-templates-directory-of-the-helm-chart",level:3},{value:"Specify values for PVC in values.yaml",id:"specify-values-for-pvc-in-valuesyaml",level:3}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"This is a short guide on how to create persistent storage on Kubernetes clusters."}),"\n",(0,n.jsx)(s.h2,{id:"a-very-basic-persistentvolumeclaim-pvc-definition",children:"A very basic PersistentVolumeClaim (PVC) definition"}),"\n",(0,n.jsx)(s.p,{children:"PVC without storage class, using default"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: example-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 8Gi\n"})}),"\n",(0,n.jsxs)(s.admonition,{title:"Reclaim policy Delete vs Retain",type:"caution",children:[(0,n.jsxs)(s.p,{children:["By default AKS clusters have storage classes with reclaim policy Delete\nThis means if the PVC is deleted, the underlying PersistentVolume (PV) will also be deleted\nTo prevent this from happening, on ",(0,n.jsx)(s.strong,{children:"dev and int clusters"})," use storageclass ",(0,n.jsx)(s.strong,{children:"default-retain"})]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: example-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  storageClassName: default-retain\n  resources:\n    requests:\n      storage: 8Gi\n"})})]}),"\n",(0,n.jsxs)(s.p,{children:["A basic example in ",(0,n.jsx)(s.a,{href:"https://github.com/catenax-ng/k8s-helm-example/tree/main/charts/k8s-helm-example/templates/persistentVolumeClaim.yaml",children:"k8s-helm-example"})]}),"\n",(0,n.jsx)(s.h2,{id:"templating-pvc",children:"Templating PVC"}),"\n",(0,n.jsx)(s.h3,{id:"create-a-template-in-the-templates-directory-of-the-helm-chart",children:"Create a template in the templates directory of the helm chart"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"templates/PVC.yaml",children:"{{- if .Values.persistence.enabled }}\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ .Release.Name }}\nspec:\n  accessModes:\n    {{- range .Values.persistence.accessModes }}\n    - {{ . | quote }}\n    {{- end }}\n  volumeMode: {{ .Values.persistence.mode }}\n  {{- if .Values.persistence.class }}\n  storageClassName: {{ .Values.persistence.class }}\n  {{- end }}\n  resources:\n    requests:\n      storage: {{ .Values.persistence.size }}\n{{- end }}\n"})}),"\n",(0,n.jsx)(s.h3,{id:"specify-values-for-pvc-in-valuesyaml",children:"Specify values for PVC in values.yaml"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"values.yaml",children:"persistence:\n  enabled: true\n  accessModes:\n    - ReadWriteOnce\n  mode: Filesystem\n  class: default-retain\n  size: 8Gi\n"})}),"\n",(0,n.jsxs)(s.admonition,{title:"Persistent Volumes in Statefulsets",type:"info",children:[(0,n.jsx)(s.p,{children:"In case a Statefulset needs persistent storage, volume claim templates generate PVCs for its replicas"}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:"volumeClaimTemplates:\n- metadata:\n    name: example-pvc\n  spec:\n    accessModes:\n      - ReadWriteOnce\n    volumeMode: Filesystem\n    storageClassName: default-retain\n    resources:\n      requests:\n        storage: 8Gi\n\n"})})]})]})}function m(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,s,t)=>{t.d(s,{Z:()=>l,a:()=>r});var n=t(7294);const a={},i=n.createContext(a);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);