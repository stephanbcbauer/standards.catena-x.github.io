"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[2070],{8884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var i=t(5893),s=t(1151);const a={title:"How to lint and test your helm chart"},o=void 0,l={id:"guides/Helm/how-to-lint-and-test-your-helm-chart",title:"How to lint and test your helm chart",description:"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing",source:"@site/docs/guides/Helm/how-to-lint-and-test-your-helm-chart.md",sourceDirName:"guides/Helm",slug:"/guides/Helm/how-to-lint-and-test-your-helm-chart",permalink:"/docs/guides/Helm/how-to-lint-and-test-your-helm-chart",draft:!1,unlisted:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/Helm/how-to-lint-and-test-your-helm-chart.md",tags:[],version:"current",frontMatter:{title:"How to lint and test your helm chart"},sidebar:"tutorialSidebar",previous:{title:"How To Define Helm Chart Dependencies",permalink:"/docs/guides/Helm/how-to-helm-dependency"},next:{title:"How to release a Helm chart",permalink:"/docs/guides/Helm/how-to-release-a-helm-chart"}},r={},h=[{value:"GitHub workflow",id:"github-workflow",level:2},{value:"What is helm test",id:"what-is-helm-test",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing\nit in a GitHub workflow."}),"\n",(0,i.jsx)(n.h2,{id:"github-workflow",children:"GitHub workflow"}),"\n",(0,i.jsxs)(n.p,{children:["The GitHub workflow in this section is a good option to run checks on pull requests when there are modifications in the ",(0,i.jsx)(n.strong,{children:"charts"})," directory.\nIt will lint your Helm chart and execute helm test to validate your installation on a kind cluster, that will be\ncreated on demand on the GitHub runner."]}),"\n",(0,i.jsx)(n.p,{children:"You can use the following workflow definition as a starting point:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Lint and Test Charts\n\n# Run chart linting and tests on each pull request\non: \n  pull_request:\n    paths:\n      - 'charts/**'\n\njobs:\n  lint-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Helm\n        uses: azure/setup-helm@v3\n        with:\n          version: v3.10.3\n\n      # Setup python as a prerequisite for chart linting \n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.7\n\n      - name: Set up chart-testing\n        uses: helm/chart-testing-action@v2.3.1\n\n      - name: Run chart-testing (list-changed)\n        id: list-changed\n        run: |\n          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})\n          if [[ -n \"$changed\" ]]; then\n            echo \"CHART_CHANGED=true\" >> $GITHUB_ENV\n          fi\n\n      # run chart linting \n      - name: Run chart-testing (lint)\n        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --config charts/chart-testing-config.yaml\n\n      # Preparing a kind cluster to install and test charts on\n      - name: Create kind cluster\n        uses: helm/kind-action@v1.4.0\n        if: ${{ env.CHART_CHANGED == 'true' }}\n\n      # install the chart to the kind cluster and run helm test\n      # define charts to test with the --charts parameter\n      - name: Run chart-testing (install)\n        run: ct install --charts charts/cxcore --config charts/chart-testing-config.yaml\n        if: ${{ env.CHART_CHANGED == 'true' }}\n\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsxs)(n.p,{children:["Step ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Run chart-testing (lint)"})})," and ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Run chart-testing (install)"})})," uses a config file that needs to be modified for every dependency repository url that is specified in the ",(0,i.jsx)(n.em,{children:"Chart.yaml"})," file! A  ",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"chart-repos"})})," section has to be added to the config. Example:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In Chart.yaml there are bitnami and runix dependecies specified:"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  - condition: postgresql.enabled\n    name: postgresql\n    repository: https://charts.bitnami.com/bitnami\n    version: 11.x.x\n  - condition: pgadmin4.enabled\n    name: pgadmin4\n    repository: https://helm.runix.net\n    version: 1.11.x\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Then the ",(0,i.jsx)(n.strong,{children:"chart-testing-config.yaml"})," file needs a section for bitnami and runix repo urls:"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"chart-repos:\n  - bitnami=https://charts.bitnami.com/bitnami\n  - runix=https://helm.runix.net\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["You also need to adapt is the list of charts to test in the final ",(0,i.jsx)(n.code,{children:"ct install"})," step."]}),"\n",(0,i.jsxs)(n.p,{children:["As you might have noticed, the ",(0,i.jsx)(n.code,{children:"ct lint"})," and ",(0,i.jsx)(n.code,{children:"ct install"})," steps are also using a configuration file specified by a\n",(0,i.jsx)(n.code,{children:"--config"})," parameter. Currently, we recommend using the chart-testing defaults. The only settings you might want to\ndisable is the maintainer check while linting the chart.\nThis can be achieved with the following setting in the configuration file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# charts/chart-testing-config.yaml\nvalidate-maintainers: false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-helm-test",children:"What is helm test"}),"\n",(0,i.jsxs)(n.p,{children:["The above described workflow described, how you can lint your helm chart and how to run ",(0,i.jsx)(n.code,{children:"helm test"})," in a GitHub workflow.\nThis section will focus on ",(0,i.jsx)(n.code,{children:"helm test"})," itself and how you can use it to validate your Helm chart installation process.\nYou can also consult the ",(0,i.jsx)(n.a,{href:"https://helm.sh/docs/topics/chart_tests/",children:"official documentation"})," on this topic."]}),"\n",(0,i.jsxs)(n.p,{children:["The following listing shows an example helm test from our\n",(0,i.jsx)(n.a,{href:"https://github.com/catenax-ng/k8s-helm-example/blob/main/charts/k8s-helm-example",children:"k8s-helm-example"})," chart."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# https://github.com/catenax-ng/k8s-helm-example/blob/main/charts/k8s-helm-example/templates/tests/test-service-connection.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: "{{ include "k8s-helm-example.fullname" . }}-test-connection"\n  labels:\n    {{- include "k8s-helm-example.labels" . | nindent 4 }}\n  annotations:\n    "helm.sh/hook": test\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: [\'wget\']\n      args: [\'{{ include "k8s-helm-example.fullname" . }}:{{ .Values.service.port }}\']\n  restartPolicy: Never\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, a helm tests is a regular kubernetes resource definition. The important part in this definition\nis the annotation ",(0,i.jsx)(n.code,{children:'"helm.sh/hook": test'}),". This specifies, that the pod will be executed, when using the helm test\ncommand."]}),"\n",(0,i.jsx)(n.p,{children:"The example above will run a basic wget call to the kubernetes service and will succeed, if the service is reachable\nand fail, if it isn't."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var i=t(7294);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);